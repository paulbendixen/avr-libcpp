// This file released under the LGPL
// Copyleft Paul M. Bendixen 2017

#ifndef TYPETRAITS
#define TYPETRAITS

namespace std
{
	template< class T, T v >
	struct integral_constant
	{
		static constexpr T value = v;
		typedef T value_type;
		typedef integral_constant type;
		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator() () const noexcept { return value; }
	};

	typedef integral_constant< bool, true > true_type;
	typedef integral_constant< bool, false > false_type;

	template< class T >
	struct remove_cv { using type = typename remove_volatile< remove_const< T >::type >::type; };

	template< class T >
	struct remove_volatile { using type = T; };
	template< class T >
	struct remove_volatile< volatile T >{ using type = T; };

	template< class T >
	struct remove_const { using type = T; };
	template< class T >
	struct remove_const< const T > { using type = T; };

	template< class T >
	struct remove_reference { using type = T; };
	template< class T >
	struct remove_reference< T& > { using type = T; };
	template< class T >
	struct remove_reference< T&& > { using type = T; };

	/* is reference: can I use using? */
	template< class T >
	struct is_reference : false_type{};

	template < class T >
	struct is_reference < T& > : true_type{};
	template < class T >
	struct is_reference < T&& > : true_type{};

	template< class T >
	struct is_same< T, T >: std::true_type {};

	template< class T, class U >
	struct is_same< T, U >: std::false_type {};

	template< class T >
	struct is_void: std::is_same< void, typename remove_cv< T >::type > {};
}

#endif
/* vim: se ft=cpp: */
